this.Districts = new Mongo.Collection('districts');

Schemas.Districts = new SimpleSchema({
	code: {
		type: String,
		max: 5
	},
	description: {
		type: String,
		max: 255
	},
	createdAt: {
		type: Date,
		autoValue: function () {
			if (this.isInsert) {
				return new Date();
			}
		}
	},
	updatedAt: {
		type: Date,
		optional: true,
		autoValue: function () {
			if (this.isUpdate) {
				return new Date();
			}
		}
	},
	owner: {
		type: String,
		regEx: SimpleSchema.RegEx.Id,
		autoValue: function () {
			if (this.isInsert) {
				return Meteor.userId();
			}
		},
		autoform: {
			options: function () {
				return _.map(Meteor.users.find().fetch(), function (user) {
					return {
						label: user.emails[0].address,
						value: user._id
					};
				});
			}
		}
	}
});

Districts.attachSchema(Schemas.Districts);

Districts.helpers({
	author: function () {
		var ref, ref1, ref2, user;
		user = Meteor.users.findOne(this.owner);
		if (((user != null ? (ref = user.profile) != null ? ref.firstName : void 0 : void 0) != null) && (user != null ? (ref1 = user.profile) != null ? ref1.lastName : void 0 : void 0)) {
			return user.profile.firstName + ' ' + user.profile.lastName;
		} else {
			return user != null ? (ref2 = user.emails) != null ? ref2[0].address : void 0 : void 0;
		}
	}
});

//REST API generated by Restivus
// /api/districts

if (Meteor.isServer) {
    var Api = new Restivus({
        prettyJson: true,
        defaultHeaders: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
    }); 
	Api.addCollection(Districts);
}